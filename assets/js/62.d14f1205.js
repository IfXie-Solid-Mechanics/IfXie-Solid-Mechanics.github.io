(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{423:function(a,t,s){"use strict";s.r(t);var e=s(7),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"potfit安装与简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#potfit安装与简介"}},[a._v("#")]),a._v(" potfit安装与简介")]),a._v(" "),t("h2",{attrs:{id:"_1-install"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-install"}},[a._v("#")]),a._v(" 1. Install")]),a._v(" "),t("p",[a._v("The open source code can be gained in potfit's github.(about 388 kB)")]),a._v(" "),t("p",[a._v("总结：小巧易读，但是几乎不再更新（上一次更新在3年前），GitHub上有教程网址，但是必须翻墙才能进。")]),a._v(" "),t("h2",{attrs:{id:"_2-compile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-compile"}},[a._v("#")]),a._v(" 2. Compile")]),a._v(" "),t("p",[a._v("potfit uses the "),t("a",{attrs:{href:"https://waf.io/",target:"_blank",rel:"noopener noreferrer"}},[a._v("waf"),t("OutboundLink")],1),a._v(" build system, which is fast, easy to use and very flexible. It is written in Python and requires a Python runtime to be available on the system.")]),a._v(" "),t("p",[a._v("The old Makefile-based build system is still available for compatibility reasons. It may not support all features and will be removed eventually.")]),a._v(" "),t("p",[a._v("总结：主要是用waf工具进行编译（所以需要少量python代码），makefile的地位极低几乎快要被取代。")]),a._v(" "),t("p",[a._v("说明：make版本的编译将不在此处进行讲解。")]),a._v(" "),t("h3",{attrs:{id:"_2-1-basics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-basics"}},[a._v("#")]),a._v(" 2.1 Basics")]),a._v(" "),t("p",[a._v("Building potfit is split up into two stages: first a configuration stage and then a build stage. The configuration stage checks if all requirements for building a potfit binary with the requested options is possible and the build stage then invokes the compiler to create the binary.")]),a._v(" "),t("p",[a._v("总结：基础编译分两步，先构造（确定模型，检查环境）再建造（编译可执行程序）。")]),a._v(" "),t("h4",{attrs:{id:"_2-1-1-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-configuration"}},[a._v("#")]),a._v(" 2.1.1 Configuration")]),a._v(" "),t("p",[a._v("The configuration uses the configure command from waf:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("./waf configure "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("additional arguments"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("A minimal configuration needs to specify at least the interaction (-i) and the potential model (-m):")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("./waf configure "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" pair "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" apot\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("After the configuration stage is complete a summary of selected options will be shown:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("potfit has been configured with the following options:\npotential model      "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" apot\ninteraction          "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" pair\nmath library         "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" mkl\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("总结：构造命令和构造结果演示")]),a._v(" "),t("h4",{attrs:{id:"_2-1-2-build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-build"}},[a._v("#")]),a._v(" 2.1.2 Build")]),a._v(" "),t("p",[a._v("The build process can be start with the build command from waf:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("./waf build\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("Since build is the default command it can also be omitted for brevity.")]),a._v(" "),t("p",[a._v("Once the build process is complete, there will be a line indicating the name of the created binary:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("---"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Successfully moved potfit_apot_pair_mkl to bin/ folder "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("---\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("总结：建造命令与建造结果演示。")]),a._v(" "),t("h3",{attrs:{id:"_2-2-compiling-potfit-with-mpi-parallelization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-compiling-potfit-with-mpi-parallelization"}},[a._v("#")]),a._v(" 2.2 Compiling potfit with MPI parallelization")]),a._v(" "),t("p",[a._v("A command to compile potfit with MPI support might look like this:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("./waf configure "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" pair "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" apot --enable-mpi\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("All enabled options will also be listed on the summary of the configuration stage:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("potfit has been configured with the following options:\npotential model      "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" apot\ninteraction          "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" pair\nmath library         "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" mkl\noptions              "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" mpi\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"_2-3-cleaning-up"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-cleaning-up"}},[a._v("#")]),a._v(" 2.3 Cleaning up")]),a._v(" "),t("p",[a._v("To remove all build artifacts from all previous builds use this command:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("./waf distclean\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h2",{attrs:{id:"_3-running-potfit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-running-potfit"}},[a._v("#")]),a._v(" 3. Running potfit")]),a._v(" "),t("p",[a._v("A potfit run can be started like this:")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("potfit_binary "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("parameter_file"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("potfit supports MPI parallelization.")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("mpirun "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-np")]),a._v(" P potfit_binary "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("parameter_file"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("Here, P is the number of MPI processes.")]),a._v(" "),t("h2",{attrs:{id:"附录-potfit的优化理论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#附录-potfit的优化理论"}},[a._v("#")]),a._v(" 附录：potfit的优化理论")])])}),[],!1,null,null,null);t.default=r.exports}}]);