(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{438:function(a,s,t){"use strict";t.r(s);var e=t(7),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"git初级教程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git初级教程"}},[a._v("#")]),a._v(" Git初级教程")]),a._v(" "),s("p",[a._v("Git是目前世界上最先进的分布式版本控制系统。")]),a._v(" "),s("h2",{attrs:{id:"_1-工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-工作原理"}},[a._v("#")]),a._v(" 1. 工作原理")]),a._v(" "),s("h3",{attrs:{id:"_1-1-分区介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-分区介绍"}},[a._v("#")]),a._v(" 1.1 分区介绍")]),a._v(" "),s("p",[a._v("首先，需要了解Git拥有四个分快，分别是工作区(Workspace)、暂存区(Index/Stage)、仓库区(Repository)、远程仓库(Remote)。")]),a._v(" "),s("p",[a._v("工作区可以是个人目前正在操作的笔记本上的某个目录，暂存区和仓库区会在接下来的Git的使用中介绍，而远程仓库可以是在GitHub上的内容。")]),a._v(" "),s("h3",{attrs:{id:"_1-2-svn和git的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-svn和git的区别"}},[a._v("#")]),a._v(" 1.2 SVN和Git的区别")]),a._v(" "),s("p",[a._v("SVN是集中式版本控制系统，而Git是分布式版本控制系统；")]),a._v(" "),s("p",[a._v("SVN的版本库放在中央服务器。也就是在干活前需要从中央服务器获得最新版本，干完活后需要将更新内容推送到中央服务器。")]),a._v(" "),s("p",[a._v("Git则没有中央服务器。虽然大多数有一个main分支或者master分支，但是理论上所有分支都是平级的，所以可以灵活地进行人为的约定行为。")]),a._v(" "),s("h3",{attrs:{id:"_1-3-git的安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-git的安装"}},[a._v("#")]),a._v(" 1.3 Git的安装")]),a._v(" "),s("p",[a._v("前往官网，根据自己计算机系统选择对应教程进行安装，安装后执行下面命令检查是否安装成功。")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--version")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h2",{attrs:{id:"_2-仓库区介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-仓库区介绍"}},[a._v("#")]),a._v(" 2. 仓库区介绍")]),a._v(" "),s("p",[a._v("仓库区，也可以叫版本库、仓库(repository)。本质上就是一个目录的记事本，跟踪这个目录下文件的修改，删除等操作，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。")]),a._v(" "),s("p",[a._v("但是Git的追踪也是有限的，其主要专注于跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等。而图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片改了，并且知道从1kb变成2kb，但是到底改了啥，版本控制也不知道。")]),a._v(" "),s("p",[a._v("而追踪内容有三种：新增、删除、修改")]),a._v(" "),s("h3",{attrs:{id:"_2-1-创建仓库区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-创建仓库区"}},[a._v("#")]),a._v(" 2.1 创建仓库区")]),a._v(" "),s("p",[a._v("在安装有Git的计算机上，在一个你希望将其设置为工作区的地方执行下面命令：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" init\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("执行完这个命令后，相应目录下会多出一个.git/这个隐藏目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把Git仓库给破坏了。")]),a._v(" "),s("h3",{attrs:{id:"_2-2-区分仓库区与工作区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-区分仓库区与工作区"}},[a._v("#")]),a._v(" 2.2 区分仓库区与工作区")]),a._v(" "),s("p",[a._v("比如你在testgit目录下执行了git init命令，那么此时这个目录就开始被追踪了，这个目录本身称为工作区，是你执行各种操作的地方，而目录下的.git/称为仓库区。而工作区不是什么操作都会被跟踪的，需要一个名为暂存区的桥梁。")]),a._v(" "),s("h2",{attrs:{id:"_3-暂存区介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-暂存区介绍"}},[a._v("#")]),a._v(" 3. 暂存区介绍")]),a._v(" "),s("p",[a._v("暂存区作为工作区和仓库区的桥梁，本身不是一个很重要的概念，因此我们在这里理解Git的一些操作例子。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-例子引入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-例子引入"}},[a._v("#")]),a._v(" 3.1 例子引入")]),a._v(" "),s("p",[a._v("我在testgit目录下新建一个记事本文件 readme.txt 内容如为：11111111")]),a._v(" "),s("p",[a._v("执行下面命令可以将readme.txt添加到暂存区里面去：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" readme.txt\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("再使用下面这个命令，即可告诉Git，把readme.txt文件提交到仓库：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'readme.txt提交'")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("然后可以使用下面这一命令检查testgit目录下是否还有文件没有提交到仓库：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" status\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("如果这时你修改了readme.txt文件后，再使用git status就会发现readme.txt的modified记录。而使用下面命令可以查看具体是怎么修改的：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" readme.txt\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"_3-2-版本回退-简易版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-版本回退-简易版本"}},[a._v("#")]),a._v(" 3.2 版本回退(简易版本)")]),a._v(" "),s("p",[a._v("如上已经学会了创建仓库，检查修改情况，提交修改文件。但是有时可能新的改动令人不满意，希望退回原本版本，那就需要先执行一下命令：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" log\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("这个命令显示出了每次提交的版本号，每次提交时修改的内容。显示顺序为由上向下=由最近向最远的修改时间。")]),a._v(" "),s("p",[a._v("而回退有两种方法，第一种是：git reset --hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset --hard HEAD~100 即可。")]),a._v(" "),s("p",[a._v("回溯后git log中将不再含最新版本的信息。而回溯后，如果你突然想到那个不满意的新版本还是有点东西的，希望再穿越回去，就可以用到第二种方法，先用git reflog查找所有记录，然后再用查到的记录版本号，用下面命令回溯："),s("s",[a._v("已经不知道是回溯还是穿越了")])]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reset "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--hard")]),a._v(" 版本号\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"_3-3-小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-小结"}},[a._v("#")]),a._v(" 3.3 小结")]),a._v(" "),s("p",[a._v("其实我自己对于暂存区理解的特殊注意仅有一个，就是当工作区中多个文件遭到修改，但是你希望分批次提交时，才会先上传一部分到暂存区提交，提交后再上传另外一部分到暂存区提交。比如你修改了程序的4个文件，其中一个是公共性文件，如main.cpp，而剩下3个都是你负责的3个文件，那么先将main.cpp上传到暂存区后再注释提交，然后再将剩下3个自己负责的文件上传到暂存区后再注释提交。这样的好处就是记录得更加清晰，便于团队合作。")]),a._v(" "),s("h2",{attrs:{id:"_4-远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-远程仓库"}},[a._v("#")]),a._v(" 4. 远程仓库")]),a._v(" "),s("p",[a._v("在了解之前，先注册Github账号。此外GitHub使用的ssh链接可以看本站“课题组服务器管理学习路线”的第一篇文章学习。")]),a._v(" "),s("p",[a._v("下面以我自己上传个人网站为例子演示将文件上传至远程仓库。"),s("s",[a._v("主要是每次vuepress编译后都会直接删除disk目录下的git仓库，现在才发现这个问题")])]),a._v(" "),s("h3",{attrs:{id:"_4-1-关联仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-关联仓库"}},[a._v("#")]),a._v(" 4.1 关联仓库")]),a._v(" "),s("p",[a._v("对于一个刚刚在GitHub上创建好的新仓库，需要将其关联到本地的某个仓库。而GitHub页面上也有对应的提示命令，即")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" origin git@github.com:IfXie-Solid-Mechanics/IfXie-Solid-Mechanics.github.io.git\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("注意，上面演示的代码是基于ssh传输，因此需要先在GitHub上设置ssh链接。")]),a._v(" "),s("p",[a._v("下面是先强制命名一个分支main(分支的概念十分重要，在下文介绍)，然后将本地 main 分支推送到远程仓库，并将 main 设置为默认的上游分支。")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-M")]),a._v(" main\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" origin main\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("由于默认的上游分支已经被设置好了，所以之后再push只需要通过git push origin main即可。此时你就拥有了真正的分布式版本库了。")]),a._v(" "),s("h2",{attrs:{id:"_5-分支与团队协作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-分支与团队协作"}},[a._v("#")]),a._v(" 5. 分支与团队协作")]),a._v(" "),s("p",[a._v("上述4个部分都是基于个人进行版本管理进行的介绍，但是Git的强大功能在于其拥有较好的团队协作时的版本管理潜力，而这一潜力通过分支的方法实现，下面将具体进行介绍。")]),a._v(" "),s("h3",{attrs:{id:"_5-1-何为分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-何为分支"}},[a._v("#")]),a._v(" 5.1 何为分支")]),a._v(" "),s("p",[a._v("上述介绍个人向Git版本管理时，有一条时间线，这条时间线称为主分支，通常是main分支或master分支。（2020年前默认为master，2020年后默认为main）而时间节点则是每次提交命令。")]),a._v(" "),s("p",[a._v("严格地说git reset --hard HEAD^命令中的HEAD指向的不是提交，而是main分支，main分支指向内部提交。这样做的原因是可以用HEAD指向其他分支，比如常见的dev分支。")]),a._v(" "),s("p",[a._v("创建并切换到dev分支有两种方法：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" dev\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch dev\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout dev\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[a._v("此时，你在dev分支下的修改文件操作是不会影响到main分支或master分支上的内容。而如果希望将dev分支的修改合并到主分支中，需要切换为主分支后，执行下面命令：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge dev\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("而如果你认为dev分支已经没有意义了，想要删除分支，则可以使用下面命令删除dev分支：（可以通过git branch查看所有分支）")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" dev\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"_5-2-常见分支操作命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-常见分支操作命令"}},[a._v("#")]),a._v(" 5.2 常见分支操作命令")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#查看分支：")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#创建分支：")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch name \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#切换分支：")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#创建+切换分支：")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" checkout –b name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#合并某分支到当前分支：")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" merge name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#删除分支：")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" branch –d name\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br")])]),s("h3",{attrs:{id:"_5-3-分支管理策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-分支管理策略"}},[a._v("#")]),a._v(" 5.3 分支管理策略")]),a._v(" "),s("p",[a._v("主分支上一般都是十分稳定的版本，一般不允许在主分支上干活；")]),a._v(" "),s("p",[a._v("通常先创建一个dev分支，然后在dev分支上干活，干完活后确认版本稳定后提交到暂存区，然后在回到主分支上合并dev分支。")]),a._v(" "),s("h3",{attrs:{id:"_5-4-分支冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-分支冲突"}},[a._v("#")]),a._v(" 5.4 分支冲突")]),a._v(" "),s("p",[a._v("这个是团队管理策略中尽量需要避免的一个问题。比如成员A在文件a.txt结尾增加了一行代码，而成员B在文件a.txt结尾增加了另一行不同的代码，此时如果成员A和成员B的分支在合并时则会遇到冲突，冲突解决方法有三：以成员A的分支为准、以成员B的分支为准、自定义解决方案。")]),a._v(" "),s("h3",{attrs:{id:"_5-5-团队工作经验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-团队工作经验"}},[a._v("#")]),a._v(" 5.5 团队工作经验")]),a._v(" "),s("p",[a._v("按照我之前的工作经验，不同模块用不同的cpp文件进行实现，每个小组成员负责自己对应的功能实现，这样就只需要修改自己这部分的cpp文件，大幅减小了冲突的可能性。然后修改main.cpp这种公共文件时需要单独上传到暂存区提交并注释，好让其他小组成员了解最新版本的公共文件时已经被修改了的，每位成员也要留意公共文件是否已经发生了修改，防止分支冲突。")]),a._v(" "),s("h2",{attrs:{id:"_6-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-总结"}},[a._v("#")]),a._v(" 6. 总结")]),a._v(" "),s("p",[a._v("上述内容仅仅是Git的基础文档。由于本人使用Git的经验并不算多，虽然知道Git还有许多高级操作，如标签、贮藏、清理、变基、重制、还原、检索、Git钩子、Git Flow等，但是并未掌握这些操作。随着学习的深入和经验的积累，未来应该还会写一篇进阶文档。")]),a._v(" "),s("p",[a._v("推荐学习map:")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("导学：Bilibili: BV1KZ4y1e7cG")])]),a._v(" "),s("li",[s("p",[a._v("Git基础：https://nulab.com/zh-cn/learn/software-development/git-tutorial/")])]),a._v(" "),s("li",[s("p",[a._v("Github经验：https://github.com/phodal/github")])]),a._v(" "),s("li",[s("p",[a._v("Github官方文档：https://docs.github.com/zh/get-started/start-your-journey/hello-world")])]),a._v(" "),s("li",[s("p",[a._v("Git官方文档：https://git-scm.com/book/zh/v2")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);