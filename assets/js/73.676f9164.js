(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{431:function(s,e,a){"use strict";a.r(e);var _=a(7),t=Object(_.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"deepmd-kit源码阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deepmd-kit源码阅读"}},[s._v("#")]),s._v(" Deepmd-kit源码阅读")]),s._v(" "),e("h2",{attrs:{id:"_1-阅读软件的结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-阅读软件的结构"}},[s._v("#")]),s._v(" 1. 阅读软件的结构")]),s._v(" "),e("p",[s._v("一般计划深度地学习一个软件时，当然可以直接找到src然后阅读源码，但是我的个人习惯是先了解软件的文件分布以及各个分布的意义后，再阅读细节的代码部分")]),s._v(" "),e("p",[s._v("对于Deepmd-kit，其主要目录结构如下（根据GitHub的readme初步推测）：")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("deepmd目录，"),e("strong",[s._v("Python模态库")]),s._v(": 存放着DeePMD-kit python modules。")])]),s._v(" "),e("li",[e("p",[s._v("source/lib目录，"),e("strong",[s._v("核心库")]),s._v("：这是项目的基石，包含了基础数据结构、算法和其他必要的函数。这些代码为整个框架提供了基本功能，如数值计算和文件处理，确保其他模块能够高效运行。")])]),s._v(" "),e("li",[e("p",[s._v("source/op目录，"),e("strong",[s._v("操作符实现")]),s._v(": 这里的OP可能指的是运算节点或特定功能模块，类似于机器学习框架中的运算单元。它们负责执行具体的算法任务，支撑模型的训练和推理过程。")])]),s._v(" "),e("li",[e("p",[s._v("source/api_cc目录: "),e("strong",[s._v("C++ API")]),s._v(": 为开发者提供使用C++调用框架功能的能力，便于集成到其他C++项目中，扩大了框架的应用范围。")])]),s._v(" "),e("li",[e("p",[s._v("source/api_c目录: "),e("strong",[s._v("C API")]),s._v(": 为开发者提供使用C语言调用框架功能的能力，便于集成到其他C语言项目中，扩大了框架的应用范围。")])]),s._v(" "),e("li",[e("p",[s._v("source/nodejs目录: "),e("strong",[s._v("Node.js API")]),s._v("：支持JavaScript开发者在服务端环境中使用框架功能，可能用于数据处理或作为网络服务提供\nAPI接口。")])]),s._v(" "),e("li",[e("p",[s._v("source/ipi目录:"),e("strong",[s._v("i-PI客户端")]),s._v("：实现与外部系统（如分布式计算平台）的连接，允许与其他工具集成，扩展框架的应用场景。")])]),s._v(" "),e("li",[e("p",[s._v("source/lmp目录:"),e("strong",[s._v("LAMMPS模块")]),s._v("：将将框架功能嵌入到LAMMPS中，支持分子动力学模拟中的深度势能模型应用，丰富了模拟方法。")])])]),s._v(" "),e("p",[s._v("如果是生物分子方向，Deepmd-kit也提供了在Gromacs框架下的实现，但是由于与我自己的研究方向比较远，后续不予讨论。")]),s._v(" "),e("h2",{attrs:{id:"_2-阅读source-lib目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-阅读source-lib目录"}},[s._v("#")]),s._v(" 2. 阅读source/lib目录")]),s._v(" "),e("p",[s._v("基于上述部分的分析，deepmd-kit软件的核心部分是source/lib目录，所以将这一部分设置为源码阅读的起点。")]),s._v(" "),e("h3",{attrs:{id:"_2-1-source-lib目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-source-lib目录结构"}},[s._v("#")]),s._v(" 2.1 source/lib目录结构")]),s._v(" "),e("p",[s._v("还是先分析目录的代码结构，然后再进一步地细看代码内容，在source/lib目录下，主要模块分别是：")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("include目录，主要是一些C++的库文件，并且标注了including DPA-2 supports，这个和DPA这个LAM有关。")])]),s._v(" "),e("li",[e("p",[s._v("src目录，源码")])]),s._v(" "),e("li",[e("p",[s._v("tests目录，测试目录")])]),s._v(" "),e("li",[e("p",[s._v("CMakelist.txt，程序编译CMake文件")])])]),s._v(" "),e("p",[s._v("所以，先初步解读CMakelist，然后阅读src目录，最后再回头分析CMakelist，中间穿插看看其他部分是这一阶段的目标；")]),s._v(" "),e("h3",{attrs:{id:"_2-2-source-lib-cmakelist-txt解读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-source-lib-cmakelist-txt解读"}},[s._v("#")]),s._v(" 2.2 source/lib/CMakelist.txt解读")]),s._v(" "),e("h4",{attrs:{id:"_2-2-1-lib-deepmd变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-lib-deepmd变量"}},[s._v("#")]),s._v(" 2.2.1 LIB_DEEPMD变量")]),s._v(" "),e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-txt"}},[e("code",[s._v("set(libname ${LIB_DEEPMD})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("文件开头是"),e("code",[s._v("set(libname ${LIB_DEEPMD})")]),s._v("。这行代码是在设置一个变量"),e("code",[s._v("libname")]),s._v("，值为"),e("code",[s._v("${LIB_DEEPMD}")]),s._v("。")]),s._v(" "),e("p",[s._v("后续可以稍稍留意"),e("code",[s._v("LIB_DEEPMD")]),s._v("变量")]),s._v(" "),e("h4",{attrs:{id:"_2-2-2-调用文件分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-调用文件分析"}},[s._v("#")]),s._v(" 2.2.2 调用文件分析")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("file(GLOB LIB_SRC src/*.cc src/*.cpp)\nfile(GLOB INC_SRC include/*.h ${CMAKE_CURRENT_BINARY_DIR}/version.h)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("接下来是"),e("code",[s._v("file(GLOB LIB_ SRC src/*.cc src/*.cpp)")]),s._v("和"),e("code",[s._v("file(GLOB INC_SRC include/*.h ${CMAKE_CURRENT_BINARY_DIR}/version.h)")]),s._v("。这两行是在收集源文件和头文件。")]),s._v(" "),e("p",[s._v("可以看出，源码都是来自src中的cc文件和cpp文件，再细看src目录后，可以发现cpp是那个主程序，其他cc都是一些函数。")]),s._v(" "),e("p",[s._v("并且还从include库中引用了.h的库文件；")]),s._v(" "),e("p",[s._v("最后从不知道的"),e("code",[s._v("CMAKE_CURRENT_BINARY_DIR")]),s._v("这个位置，引用了一个版本库文件，之后可以稍微留意。")]),s._v(" "),e("h4",{attrs:{id:"_2-2-3-gpu支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-gpu支持"}},[s._v("#")]),s._v(" 2.2.3 GPU支持")]),s._v(" "),e("p",[s._v("接下来，有两段条件判断：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('if(USE_CUDA_TOOLKIT)\n  add_definitions("-DGOOGLE_CUDA")\n  add_subdirectory(src/gpu)\nendif()\nif(USE_ROCM_TOOLKIT)\n  add_definitions("-DTENSORFLOW_USE_ROCM")\n  add_subdirectory(src/gpu)\nendif()\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("ol",[e("li",[e("p",[e("code",[s._v("if(USE_ CUDA_TOOLKIT)")])]),s._v(" "),e("ul",[e("li",[s._v("如果开启了CUDA工具包的使用，那么添加一个定义"),e("code",[s._v("-DGOOGLE_CUDA")]),s._v("。")]),s._v(" "),e("li",[s._v("然后调用"),e("code",[s._v("add_subdirectory(src/gpu)")]),s._v("，这会将"),e("code",[s._v("src/gpu")]),s._v("目录下的CMakeLists.txt包含进来，进行进一步的构建配置。")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("if(USE_ROCM_TOOLKIT)")])]),s._v(" "),e("ul",[e("li",[s._v("类似地，如果启用了ROCm工具包，则添加定义"),e("code",[s._v("-DTENSORFLOW_USE_ROCM")]),s._v("。")]),s._v(" "),e("li",[s._v("同样调用"),e("code",[s._v("add_subdirectory(src/gpu)")]),s._v("，可能因为ROCm和CUDA在GPU处理上有相似的部分。")])])])]),s._v(" "),e("p",[s._v("总而言之，要用GPU往往需要CUDA和ROCm工具包，然后再调用scr/gpu来进行编译程序。")]),s._v(" "),e("h4",{attrs:{id:"_2-2-4-共享库设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-共享库设置"}},[s._v("#")]),s._v(" 2.2.4 共享库设置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('function(create_library _suffix)\n  set(libname_suffix "${libname}${_suffix}")\n  add_library(${libname_suffix} SHARED ${LIB_SRC})\n  target_include_directories(\n    ${libname_suffix}\n    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n           $<INSTALL_INTERFACE:include>)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("然后是一个函数定义："),e("code",[s._v("function(create_ library _suffix)")])]),s._v(" "),e("p",[s._v("这个函数的作用是创建一个共享库（shared library）。函数参数是一个后缀字符串"),e("code",[s._v("_suffix")]),s._v("。以下是函数的内部操作：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v('set(libname_suffix "${libname}${_suffix}")')]),s._v("：将传入的"),e("code",[s._v("_suffix")]),s._v("附加到"),e("code",[s._v("libname")]),s._v("后面，生成新的库名字。")]),s._v(" "),e("li",[e("code",[s._v("add_library(${libname_suffix} SHARED ${LIB_SRC})")]),s._v("：根据收集来的源文件创建一个共享库，名字是刚刚生成的\n"),e("code",[s._v("libname_suffix")]),s._v("。")]),s._v(" "),e("li",[s._v("配置包含目录：通过"),e("code",[s._v("target_include_directories")]),s._v("设置公共的头文件路径，包括当前源代码的include目录和安装后\n的include目录。")])]),s._v(" "),e("p",[s._v("总而言之，就是把scr中的源码设置了一个公共的头文件路径。")]),s._v(" "),e("h4",{attrs:{id:"_2-2-5-针对cuda和rocm工具包的条件判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-针对cuda和rocm工具包的条件判断"}},[s._v("#")]),s._v(" 2.2.5 针对CUDA和ROCm工具包的条件判断")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if(USE_CUDA_TOOLKIT)\n    target_link_libraries(${libname_suffix} PUBLIC deepmd_dyn_cudart)\n    target_link_libraries(${libname_suffix} INTERFACE deepmd_op_cuda${_suffix})\n    target_link_libraries(${libname_suffix} INTERFACE ${EXTRA_LIBS})\n    # gpu_cuda.h\n    target_include_directories(\n      ${libname_suffix} PUBLIC $<BUILD_INTERFACE:${CUDAToolkit_INCLUDE_DIRS}>\n                               $<INSTALL_INTERFACE:include>)\n  endif()\n\n  if(USE_ROCM_TOOLKIT)\n    # to define __HIP_PLATFORM_AMD__ in hip_runtime.h\n    target_link_libraries(${libname_suffix} PUBLIC hip::host)\n    target_link_libraries(${libname_suffix} INTERFACE deepmd_op_rocm${_suffix})\n    target_link_libraries(${libname_suffix} INTERFACE ${EXTRA_LIBS})\n    # gpu_rocm.h\n    target_include_directories(\n      ${libname_suffix} PUBLIC $<BUILD_INTERFACE:${HIP_INCLUDE_DIRS}>\n                               $<INSTALL_INTERFACE:include>)\n  endif()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("然后有针对CUDA和ROCm工具包的条件判断：")]),s._v(" "),e("ol",[e("li",[e("p",[e("code",[s._v("if(USE_ CUDA_TOOLKIT)")]),s._v("：")]),s._v(" "),e("ul",[e("li",[s._v("链接库"),e("code",[s._v("deepmd_dyn_cudart")]),s._v("到当前目标。")]),s._v(" "),e("li",[s._v("通过"),e("code",[s._v("target_link_libraries")]),s._v("将接口库"),e("code",[s._v("deepmd_op_cuda${_suffix}")]),s._v("添加为依赖。")]),s._v(" "),e("li",[s._v("添加额外的库"),e("code",[s._v("EXTRA_LIBS")]),s._v("作为依赖。")]),s._v(" "),e("li",[s._v("设置头文件包含路径，包括CUDA工具包的头文件目录。")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("if(USE_ROCM_TOOLKIT)")]),s._v("：")]),s._v(" "),e("ul",[e("li",[s._v("链接HIP运行时库"),e("code",[s._v("hip::host")]),s._v("。")]),s._v(" "),e("li",[s._v("接口库"),e("code",[s._v("deepmd_op_rocm${_suffix}")]),s._v("作为依赖。")]),s._v(" "),e("li",[s._v("同样添加"),e("code",[s._v("EXTRA_LIBS")]),s._v("。")]),s._v(" "),e("li",[s._v("设置包含路径，包括ROCm的头文件目录。")])])])]),s._v(" "),e("p",[s._v("之后开发时可以再回过来细看这些部分")]),s._v(" "),e("h4",{attrs:{id:"_2-2-6-设置目标属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-设置目标属性"}},[s._v("#")]),s._v(" 2.2.6 设置目标属性")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("set_target_properties(${libname_suffix} PROPERTIES INSTALL_RPATH $ORIGIN)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("code",[s._v("set_target_properties(${libname_suffix} PROPERTIES INSTALL_RPATH $ORIGIN)")]),s._v("。这行代码\n的作用是将安装时的运行时路径设置为当前可执行文件的位置（即"),e("code",[s._v("$ORIGIN")]),s._v("），这样在运行时能够正确找到依赖的动态\n库。")]),s._v(" "),e("h4",{attrs:{id:"_2-2-7-无法直接分析的条件判断部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-7-无法直接分析的条件判断部分"}},[s._v("#")]),s._v(" 2.2.7 无法直接分析的条件判断部分")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  if(CMAKE_TESTING_ENABLED)\n    target_link_libraries(${libname_suffix} PRIVATE coverage_config)\n  endif()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("如果"),e("code",[s._v("CMAKE_TESTING_ENABLED")]),s._v("为True，那么链接一个名为"),e("code",[s._v("coverage_ config")]),s._v("的目标："),e("code",[s._v("target_link_libraries(${libname_suffix} PRIVATE coverage_config)")]),s._v("。这可能与代码覆盖率测量有关。")]),s._v(" "),e("h4",{attrs:{id:"_2-2-8-python接口构建判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-8-python接口构建判断"}},[s._v("#")]),s._v(" 2.2.8 Python接口构建判断")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("  if(BUILD_PY_IF)\n    install(TARGETS ${libname_suffix} DESTINATION deepmd/lib/)\n  else(BUILD_PY_IF)\n    install(\n      TARGETS ${libname_suffix}\n      EXPORT ${CMAKE_PROJECT_NAME}Targets\n      DESTINATION lib/)\n  endif(BUILD_PY_IF)\nendfunction()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("然后根据条件判断是否构建Python接口：")]),s._v(" "),e("ul",[e("li",[e("p",[e("code",[s._v("if(BUILD_ PY_IF)")]),s._v("：")]),s._v(" "),e("ul",[e("li",[s._v("将生成的共享库安装到"),e("code",[s._v("deepmd/lib/")]),s._v("目录下。")])])]),s._v(" "),e("li",[e("p",[s._v("否则，执行标准安装：将目标文件安装到"),e("code",[s._v("lib/")]),s._v("目录，并导出目标信息以便其他项目使用。")])])]),s._v(" "),e("h4",{attrs:{id:"_2-2-9-abi宏定义处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-9-abi宏定义处理"}},[s._v("#")]),s._v(" 2.2.9 ABI宏定义处理")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('remove_definitions(-D_GLIBCXX_USE_CXX11_ABI=${OP_CXX_ABI})\ncreate_library("")\ntarget_compile_definitions(\n  ${libname}\n  PUBLIC "$<$<COMPILE_LANGUAGE:CXX>:_GLIBCXX_USE_CXX11_ABI=${OP_CXX_ABI}>")\nif(DEEPMD_BUILD_COMPAT_CXXABI)\n  create_library("_compat_cxxabi")\n  target_compile_definitions(\n    ${libname}_compat_cxxabi\n    PUBLIC\n      "$<$<COMPILE_LANGUAGE:CXX>:_GLIBCXX_USE_CXX11_ABI=${OP_CXX_ABI_COMPAT}>")\nendif()\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("这部分和C++混合编码时相关，之后有空可以写一写相关内容。")]),s._v(" "),e("h4",{attrs:{id:"_2-2-10-最终安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-10-最终安装"}},[s._v("#")]),s._v(" 2.2.10 最终安装")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if(NOT BUILD_PY_IF)\n  install(FILES ${INC_SRC} DESTINATION include/deepmd)\nendif()\n\nif(BUILD_CPP_IF AND CMAKE_TESTING_ENABLED)\n  add_subdirectory(tests)\nendif()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("最后的条件判断和安装步骤：")]),s._v(" "),e("ul",[e("li",[e("p",[e("code",[s._v("if(BUILD_PY_IF)")]),s._v("：将共享库安装到特定的Python接口目录。")])]),s._v(" "),e("li",[e("p",[s._v("否则，执行常规安装步骤，将共享库安装到"),e("code",[s._v("lib/")]),s._v("目录，并导出目标以便其他项目使用。")])])]),s._v(" "),e("h4",{attrs:{id:"_2-2-11-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-11-小结"}},[s._v("#")]),s._v(" 2.2.11 小结")]),s._v(" "),e("p",[s._v("针对CMakelist.txt文件的初步解读，可以获得信息如下：")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("软件编译所需要的源码文件来源于src，并且下一步工作就是阅读其中主要的cpp源码；")])]),s._v(" "),e("li",[e("p",[s._v("CMakelist有10个部分，以C语言为基础，混合Python，并且基于CUDA和ROCm工具进行GPU编程。")])])]),s._v(" "),e("h3",{attrs:{id:"_2-3-阅读source-lib-scr-simulationregion-cpp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-阅读source-lib-scr-simulationregion-cpp"}},[s._v("#")]),s._v(" 2.3 阅读source/lib/scr/SimulationRegion.cpp")]),s._v(" "),e("h4",{attrs:{id:"_2-3-1-源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-源码"}},[s._v("#")]),s._v(" 2.3.1 源码")]),s._v(" "),e("div",{staticClass:"language-cpp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SPDX-License-Identifier: LGPL-3.0-or-later")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifndef")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token expression"}},[s._v("MOASP_INLINE_IMPLEMENTATION")])]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SimulationRegion.h"')])]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SimulationRegion_Impl.h"')])]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("template")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SimulationRegion")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("template")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SimulationRegion")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);